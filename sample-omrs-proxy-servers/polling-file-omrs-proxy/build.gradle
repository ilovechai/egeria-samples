/*
 * SPDX-License-Identifier: Apache-2.0
 * Copyright Contributors to the ODPi Egeria project.
 */


/*
 * Used for Build scripts/plugins only
*/

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'com.netflix.nebula:gradle-aggregate-javadocs-plugin:3.0.1'
    }
}

plugins {
        //id "nebula.lint" version "16.9.0"
        //id "nebula-aggregate-javadocs"
    }

/* run './gradlew aggregateJavadocs' at top level to build all docs & output to build/docs/javadoc */
apply plugin: 'nebula-aggregate-javadocs'
    group = 'org.odpi.egeria'
    version = 1


repositories {
         mavenCentral()
    }

    // This enforces version checking but is slow to process
    //apply plugin: 'nebula.lint'
    //gradleLint {
    //    rules = ['all-dependency'] // TODO: Change to criticalRules when ready to enforce
    //
    //}


/*
 * Configuration for sub projects only
 */
apply plugin: 'java-library'


    // Mostly java, so default to this for now
    apply plugin: 'java'

    // As we've migrated from maven - we'll assume all submodules publish directly to maven
    apply plugin: 'maven-publish'
    ext {
        egeriaversion = '3.8'
        logbackVersion = '1.2.6'
        jacksonVersion = '2.13.0'
        mockitoVersion = '3.12.4'
        junitjupiterVersion = '5.8.1'
        httpcoreVersion = '4.4.14'
    }
    // Dependency Management - to fix versions. Pick up maven build settings for now
    dependencies {
            implementation "org.slf4j:slf4j-api:${logbackVersion}"
            implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
            implementation "com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}"
            implementation "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}"
            implementation "org.springframework:spring-core:${egeriaversion}"
            implementation "org.junit.jupiter:junit-jupiter:${junitjupiterVersion}"
            implementation "org.odpi.egeria:open-connector-framework:${egeriaversion}"
            implementation "org.odpi.egeria:open-metadata-types:${egeriaversion}"
            implementation "org.odpi.egeria:audit-log-framework:${egeriaversion}"
            implementation "org.odpi.egeria:repository-services:${egeriaversion}"
            implementation "org.odpi.egeria:repository-services-implementation:${egeriaversion}"
            implementation "org.odpi.egeria:admin-services-api:${egeriaversion}"
            implementation "org.odpi.egeria:connector-configuration-factory:${egeriaversion}"
            implementation "org.odpi.egeria:repository-services-apis:${egeriaversion}"
            implementation "org.odpi.egeria:admin-services-api:${egeriaversion}"
            // -- Testing --
            implementation "ch.qos.logback:logback-classic:${logbackVersion}"



//
//         Unsure if we need these - copied from the Atlas pom file....
//            <groupId>org.testng</groupId>
//        <artifactId>testng</artifactId>

//                <groupId>org.mock-server</groupId>
//            <artifactId>mockserver-client-java</artifactId>

//            <groupId>org.mock-server</groupId>
//                <artifactId>mockserver-core</artifactId>

//                <groupId>org.odpi.egeria</groupId>
//            <artifactId>inmemory-open-metadata-topic-connector</artifactId>

    }

    // sources required to publish a legitimate maven package for distribution
    java {
        withSourcesJar()
    }

    test {
        useJUnitPlatform()
        dependencies {
            testCompile("org.junit.jupiter:junit-jupiter-api:5.7.0")
            testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.7.0"
            testImplementation "org.junit.jupiter:junit-jupiter-params:5.7.0"
            testImplementation("org.junit.jupiter:junit-jupiter-api:5.7.0")
        }

        testLogging {
            events "passed", "skipped", "failed"
        }

        reports {
            html.enabled = true
        }

        filter {
           //include all unit tests
           includeTestsMatching "*Test"

        }
    }

    // publish maven package
    publishing {
        publications {
            maven(MavenPublication) {
                from(components.java)
            }
        }
    }

// Maven Central (technically sonatype oss) requires we distribute source and javadoc
java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
    withJavadocJar()
    withSourcesJar()
}
// More Java language settings
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    sourceCompatibility = "11"
    targetCompatibility = "11"
    options.incremental = true
    options.fork = true
    options.failOnError = true
    options.compilerArgs << '-Xlint:unchecked' << '-Xlint:deprecation'
}

// For later java versions this is recommended - keep conditional in case we want to build on 8
javadoc {
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}
